{"version":3,"sources":["Components/ContatctList/List.module.scss","Components/ContactForm/Form.module.scss","Components/Filter/Filter.module.scss","redux/contact/contact-selector.js","redux/contact/contact-operation.js","Components/ContactForm/ContactForm.js","Components/ContatctList/ContactListItem.js","Components/ContatctList/ContatctList.js","Components/Filter/Filter.js","pages/ContactPage.js"],"names":["module","exports","getLoad","state","contact","loading","getFilter","filter","getAllContacts","items","getVisibleContacts","createSelector","contacts","normolizedFilter","toLowerCase","name","includes","getContactName","map","dispatch","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","addContactRequest","post","addContactSuccess","addContactError","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","INITIAL_STATE","number","ContactForm","handleChangeForm","target","value","setState","uniqueContact","props","find","handleFormSubmit","e","preventDefault","onSubmit","resetForm","alert","this","fetchContact","loadContact","Loader","className","s","title","contact_form","contact_input","type","placeholder","onChange","contact_bth","Component","connect","contactOperation","ContactListItem","id","onRemove","contact_item","contact_name","delete_button","onClick","propTypes","PropTypes","string","isRequired","func","deleteContact","contactsOperation","length","contact_list","event","filterContact","search_block","ContactPage"],"mappings":"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","file":"static/js/3.a4d72743.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"List_contact_list__3d9ss\",\"delete_button\":\"List_delete_button__1Fy4K\",\"contact_item\":\"List_contact_item__11C51\",\"contact_name\":\"List_contact_name__J7qw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Form_title__3NbAF\",\"contact_form\":\"Form_contact_form__n2Wti\",\"contact_input\":\"Form_contact_input__39-kE\",\"contact_bth\":\"Form_contact_bth__ETHqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__21DuS\",\"contact_input\":\"Filter_contact_input__3mrr1\",\"search_block\":\"Filter_search_block__2np_P\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getLoad = state => state.contact.loading;\nexport const getFilter = state => state.contact.filter;\nconst getAllContacts = state => state.contact.items;\nexport const getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => {\n        const normolizedFilter = filter.toLowerCase();\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(normolizedFilter),\n        );\n    },\n);\nexport const getContactName = createSelector([getAllContacts], contacts => {\n    return contacts.map(({ name }) => name);\n});\n","import axios from 'axios';\nimport {\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n} from './contact-action';\n\nconst fetchContact = () => async dispatch => {\n    dispatch(fetchContactRequest());\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactSuccess(data));\n    } catch (error) {\n        dispatch(fetchContactError(error.message));\n    }\n};\n\nconst addContact = contact => async dispatch => {\n    dispatch(addContactRequest());\n    try {\n        const { data } = await axios.post('/contacts', contact);\n        dispatch(addContactSuccess({ ...data }));\n    } catch (error) {\n        dispatch(addContactError(error.message));\n    }\n};\n\nconst deleteContact = contactId => async dispatch => {\n    dispatch(deleteContactRequest());\n    try {\n        const { data } = await axios.delete(`/contacts/${contactId}`);\n        dispatch(deleteContactSuccess(contactId));\n    } catch (error) {\n        dispatch(deleteContactError(error.message));\n    }\n};\n\nexport default { fetchContact, addContact, deleteContact };\n","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport PropTypes from 'prop-types'\n\n\nimport { getLoad, getContactName } from '../../redux/contact/contact-selector';\nimport contactOperation from '../../redux/contact/contact-operation';\nimport Loader from '../Loader';\n\nimport s from './Form.module.scss';\n\n\n\nconst INITIAL_STATE = {\n    name: '',\n    number: '',\n}\nclass ContactForm extends Component {\n    state = {\n        ...INITIAL_STATE\n    }\n    componentDidMount() {\n        this.props.fetchContact();\n    }\n    handleChangeForm = ({ target }) => {\n        const { name, value } = target;\n        this.setState({ [name]: value });\n    }\n    uniqueContact = name => {\n        const contact = !this.props.name.find(contact => contact === name);\n        return contact;\n    };\n    handleFormSubmit = (e) => {\n        e.preventDefault();\n        const { name } = this.state;\n        this.uniqueContact(name);\n        if (this.state.name !== '') {\n            if (!this.uniqueContact(name)) {\n                alert(`'${name} is already in contacts'`);\n                return;\n            } else {\n                this.props.onSubmit(this.state);\n                this.resetForm();\n            }\n            return;\n        }\n        alert('Enter the name or number');\n    }\n    resetForm = () => this.setState(INITIAL_STATE)\n    render() {\n        const { name, number } = this.state;\n        return (\n            <>\n                {this.props.loadContact && <Loader />}\n                <h2 className={s.title}>Contact Form</h2>\n                <form className={s.contact_form} onSubmit={this.handleFormSubmit}>\n                    <input\n                        className={s.contact_input}\n                        type=\"text\" name='name'\n                        placeholder='Enter name'\n                        value={name}\n                        onChange={this.handleChangeForm} />\n                    <input\n                        className={s.contact_input}\n                        type=\"tel\" name='number'\n                        placeholder='Enter phone number'\n                        value={number}\n                        onChange={this.handleChangeForm} />\n                    <button className={s.contact_bth}\n                        type='submit'>Add contact</button>\n                </form>\n            </>\n        )\n    }\n};\n\n\n\nconst mapStateToProps = state => ({\n    loadContact: getLoad(state),\n    name: getContactName(state),\n});\nconst mapDispatchToProps = dispatch => ({\n    fetchContact: () => dispatch(contactOperation.fetchContact()),\n    onSubmit: data => dispatch(contactOperation.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport s from './List.module.scss';\n\n\nconst ContactListItem = ({ id, name, number, onRemove }) => {\n    return (\n        <li className={s.contact_item}>\n            <p className={s.contact_name}>{name} </p> :\n            <p>{number}</p>\n            <button className={s.delete_button}\n                onClick={() => onRemove(id)}>Delete</button>\n        </li>\n    )\n};\nContactListItem.propTypes = {\n    contacts: PropTypes.array.isRequired,\n    onRemove: PropTypes.func.isRequired,\n};\nexport default ContactListItem;","import React from 'react';\nimport s from './List.module.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n\nimport ContactListItem from './ContactListItem'\n\nimport { getVisibleContacts } from '../../redux/contact/contact-selector';\nimport contactsOperation from '../../redux/contact/contact-operation';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n    if (contacts.length === 0) return null\n    return (\n        <ul className={s.contact_list}>\n            {\n                contacts\n                    .map(\n                        (contact) => <ContactListItem\n                            key={contact.id}\n                            {...contact}\n                            onRemove={deleteContact} />\n                    )\n            }\n        </ul>\n    )\n};\n\n\n// const visibleContacts = (allContacts, filter) => {\n//     const normolizedFilter = filter.toLowerCase();\n//     return allContacts.filter(contact =>\n//         contact.name.toLowerCase().includes(normolizedFilter),\n//     );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//     contacts: visibleContacts(items, filter),\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//     deleteContact: id => dispatch(action.deleteContact(id)),\n// });\n\nconst mapStateToProps = state => ({\n    contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    deleteContact: id => dispatch(contactsOperation.deleteContact(id)),\n});\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    onRemove: PropTypes.func.isRequired,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport s from './Filter.module.scss';\nimport { filterContact } from '../../redux/contact/contact-action';\nimport { getFilter } from '../../redux/contact/contact-selector';\n\n\nconst Filter = ({ filter, onChange }) => {\n    return (\n        <div className={s.search_block}>\n            <h2 className={s.title}>Contacts list</h2>\n            <input\n                className={s.contact_input}\n                type=\"text\"\n                name='filter'\n                value={filter}\n                onChange={onChange}\n                placeholder='Enter name for your Search'\n            />\n        </div>\n    )\n};\n\n// const mapStateToProps = state => ({\n//     value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//     onChange: e =>\n//         dispatch(action.filterContact(e.target.value)),\n// });\n\nconst mapStateToProps = state => ({\n    value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: event =>\n        dispatch(filterContact(event.target.value)),\n});\n\nFilter.propTypes = {\n    onChange: PropTypes.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport ContactForm from \"../Components/ContactForm\";\nimport ContactList from \"../Components/ContatctList\";\nimport Filter from \"../Components/Filter\";\nimport Loader from '../Components/Loader';\nimport contactOperation from '../redux/contact/contact-operation';\nimport { getContactName, getLoad } from '../redux/contact/contact-selector';\n\n\nconst ContactPage = () => {\n    return (\n        <>\n            <ContactForm />\n            <Filter />\n            <ContactList />\n        </>\n    )\n}\n// class ContactPage extends Component {\n//     componentDidMount() {\n//         console.log(this.props, 'her')\n//         this.props.fetchContact();\n//     }\n//     render() {\n//         return (\n//             <>\n//                 {this.props.loadContact && <Loader />}\n//                 <ContactForm />\n//                 <Filter />\n//                 <ContactList />\n//             </>\n//         )\n//     }\n// }\n// const mapStateToProps = state => ({\n//     loadContact: getLoad(state)\n// });\n// const mapDispatchToProps = dispatch => ({\n//     fetchContact: () => dispatch(contactOperation.fetchContact())\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactPage);\nexport default ContactPage;\n"],"sourceRoot":""}