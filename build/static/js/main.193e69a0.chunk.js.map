{"version":3,"sources":["Routers/PrivateRoute.js","Routers/PublicRoute.js","Routers/Routers.js","Components/Container/Container.js","Components/Header/Navigation/Navigation.js","Components/Header/UserMenu/UserMenu.js","Components/Header/AuthNav/AuthNav.js","Components/Header/Header.js","Components/App.js","redux/contact/contact-reducer.js","redux/store.js","index.js","redux/contact/contact-action.js","Components/Loader/Loader.js","Components/Loader/Loader.module.scss","redux/auth/auth-action.js","redux/auth/auth-reducer.js","Components/Pnotify/Pnotify.js","redux/auth/auth-operation.js","redux/auth/auth-selector.js"],"names":["connect","state","isAuthenticated","authSelector","getIsAuthenticated","Component","component","redirectTo","routeProps","render","props","to","restricted","HomePage","lazy","ContactPage","LoginPage","RegisterPage","Pages","fallback","Loader","path","exact","Container","children","className","activeClassName","mapDispatchToProps","logOut","authOperation","name","getUserName","type","onClick","AuthNav","App","this","onGetCurrentUser","getCurrentUser","items","createReducer","fetchContactSuccess","_","payload","addContactSuccess","deleteContactSuccess","filter","contact","id","loading","fetchContactRequest","fetchContactError","addContactRequest","addContactError","deleteContactRequest","deleteContactError","filterContact","error","combineReducers","authPersistConfig","key","storage","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactReducer","auth","persistReducer","authReducer","devTools","process","persistor","persistStore","ReactDOM","StrictMode","document","getElementById","createAction","s","color","height","width","module","exports","registerRequest","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","initialUserState","email","authAction","user","token","success","title","delay","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","post","respons","data","Pnotify","message","logIn","getState","persistedToken","get","response"],"mappings":"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","file":"static/js/main.193e69a0.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route } from 'react-router-dom';\nimport { authSelector } from '../redux/auth';\n\nconst PrivateRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated ? (<Component {...props} />) : (<Redirect to={redirectTo} />)\n\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelector.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect, Route } from 'react-router-dom';\nimport { authSelector } from '../redux/auth';\n\nconst PublicRoute = ({\n  component: Component,\n  isAuthenticated,\n  redirectTo,\n  ...routeProps\n}) => (\n  <Route\n    {...routeProps}\n    render={props =>\n      isAuthenticated && routeProps.restricted ? (\n        <Redirect to={redirectTo} />\n      ) : (\n        <Component {...props} />\n      )\n    }\n  />\n);\n\nconst mapStateToProps = state => ({\n  isAuthenticated: authSelector.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(PublicRoute);\n","import React, { Suspense, lazy } from 'react';\nimport { Switch } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport PublicRoute from './PublicRoute';\nimport Loader from '../Components/Loader';\n\n// import ContactPage from '../pages/ContactPage'\n\n\nconst HomePage = lazy(\n  () => import('../pages/HomePage') /* webpackChunkName: \"HomePage\" */,\n);\nconst ContactPage = lazy(\n  () =>\n    import('../pages/ContactPage') /* webpackChunkName: \"ContactPage\" */,\n);\nconst LoginPage = lazy(\n  () => import('../pages/LoginPage') /* webpackChunkName: \"RegisterPage\" */,\n);\nconst RegisterPage = lazy(\n  () => import('../pages/RegisterPage') /* webpackChunkName: \"LoginPage\" */,\n);\n\nconst Pages = () => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <Switch>\n        <PublicRoute path=\"/\" exact component={HomePage} />\n        <PrivateRoute\n          path=\"/contacts\"\n          component={ContactPage}\n          redirectTo=\"/login\"\n        />\n        <PublicRoute\n          path=\"/register\"\n          component={RegisterPage}\n          restricted\n          redirectTo=\"/contacts\"\n        />\n        <PublicRoute\n          path=\"/login\"\n          component={LoginPage}\n          restricted\n          redirectTo=\"/contacts\"\n        />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport default Pages;\n","import React from 'react';\n\nimport './ContainerStyle.scss'\n\nconst Container = ({ children }) => (\n    <main className=\"container\">{children}</main>\n);\n\nexport default Container;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { authSelector } from '../../../redux/auth';\nimport './NavigationStyle.scss';\n\nconst Navigation = ({ isAuthenticated }) => {\n    return (\n        <nav>\n            <NavLink\n                className=\"link\"\n                activeClassName=\"activeLink\"\n                to=\"/\"\n                exact\n            >\n                Home\n        </NavLink>\n            {isAuthenticated && (<NavLink\n                className='link'\n                activeClassName='activeLink'\n                to=\"/contacts\"\n                exact\n            >\n                Contacts\n            </NavLink>\n            )}\n        </nav>\n    )\n}\nconst mapStateToProps = state => ({\n    isAuthenticated: authSelector.getIsAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(Navigation);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { authSelector, authOperation } from '../../../redux/auth';\n\nimport './UserMenuStyle.scss'\n\nconst UserMenu = ({ name, logOut }) => {\n    return (\n        <div className=\"logout-container\">\n            <span className='welcone-text'>Welcome {name} </span>\n            <button className=\"logout-button\" type=\"button\" onClick={logOut}>\n                Log out\n        </button>\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    name: authSelector.getUserName(state),\n});\n\nconst mapDispatchToProps = {\n    logOut: authOperation.logOut,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './AuthNavStyle.scss'\n\nconst AuthNav = () => {\n    return (\n        <nav>\n            <NavLink\n                className=\"link\"\n                activeClassName=\"activeLink\"\n                to=\"/register\"\n                exact\n            >\n                Register\n      </NavLink>\n            <NavLink\n                className=\"link\"\n                activeClassName=\"activeLink\"\n                to=\"/login\"\n                exact\n            >\n                Login\n      </NavLink>\n        </nav>\n    );\n};\n\nexport default AuthNav;","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Navigation from './Navigation'\nimport './Header.scss';\nimport { authSelector } from '../../redux/auth';\nimport UserMenu from './UserMenu';\nimport AuthNav from './AuthNav';\n\nconst Header = ({ isAuthenticated }) => {\n    return (\n        <header className=\"header-container\">\n            <Navigation />\n            <div className='registerContainer'>\n                {isAuthenticated ? <UserMenu /> : <AuthNav />}\n            </div>\n        </header>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isAuthenticated: authSelector.getIsAuthenticated(state),\n});\n\n\nexport default connect(mapStateToProps, null)(Header);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { authOperation } from \"../redux/auth\";\nimport Pages from \"../Routers/Routers\";\nimport Container from \"./Container\";\n\nimport Header from \"./Header\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <Container>\n          <Pages />\n        </Container>\n      </>\n    )\n\n  }\n}\n\nconst mapDispatchToProps = {\n  onGetCurrentUser: authOperation.getCurrentUser,\n};\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport {\n    fetchContactRequest,\n    fetchContactSuccess,\n    fetchContactError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError,\n    filterContact,\n} from './contact-action';\n\n\nconst items = createReducer([], {\n    [fetchContactSuccess]: (_, { payload }) => payload,\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\n    [deleteContactSuccess]: (state, { payload }) =>\n        state.filter(contact => contact.id !== payload),\n});\n\nconst loading = createReducer(false, {\n    [fetchContactRequest]: () => true,\n    [fetchContactSuccess]: () => false,\n    [fetchContactError]: () => false,\n    [addContactRequest]: () => true,\n    [addContactSuccess]: () => false,\n    [addContactError]: () => false,\n    [deleteContactRequest]: () => true,\n    [deleteContactSuccess]: () => false,\n    [deleteContactError]: () => false,\n});\nconst filter = createReducer('', {\n    [filterContact]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n    items,\n    filter,\n    loading,\n    error,\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport persistReducer from 'redux-persist/es/persistReducer';\nimport persistStore from 'redux-persist/es/persistStore';\nimport contactReducer from \"./contact/contact-reducer\";\nimport storage from 'redux-persist/lib/storage';\nimport { authReducer } from './auth';\n\nconst authPersistConfig = {\n    key: 'token',\n    storage,\n    whitelist: ['token'],\n};\n\nconst middleware = [\n    ...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    })\n];\n\nconst store = configureStore({\n    reducer: {\n        contact: contactReducer,\n        auth: persistReducer(authPersistConfig, authReducer),\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\nexport default { store, persistor };","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from \"./Components/App\";\nimport { Provider } from \"react-redux\";\n\nimport store from './redux/store'\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport 'modern-normalize/modern-normalize.css';\nimport \"./index.css\";\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store.store}>\n            <PersistGate loading={null} persistor={store.persistor}>\n                <BrowserRouter>\n                    <App />\n                </BrowserRouter>\n            </PersistGate>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"));\n","import { createAction } from '@reduxjs/toolkit';\n\n\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\nexport const fetchContactError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const filterContact = createAction('contacts/changeFilter');\n","import React, { Component } from 'react'\n\nimport Loader from \"react-loader-spinner\";\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\nimport s from './Loader.module.scss';\n\nexport default class App extends Component {\n    render() {\n        return (\n            <Loader\n                className={s.Loader}\n                type=\"Puff\"\n                color=\"#3f51b5\"\n                height={100}\n                width={100}\n            />\n        );\n    }\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__BIuQd\"};","import { createAction } from '@reduxjs/toolkit';\n\n\nconst registerRequest = createAction('auth/registerRequest');\nconst registerSuccess = createAction('auth/registerSuccess');\nconst registerError = createAction('auth/registerError');\n\nconst loginRequest = createAction('auth/loginRequest');\nconst loginSuccess = createAction('auth/loginSuccess');\nconst loginError = createAction('auth/loginError');\n\nconst logoutRequest = createAction('auth/logoutRequest');\nconst logoutSuccess = createAction('auth/logoutSuccess');\nconst logoutError = createAction('auth/logoutError');\n\nconst getCurrentUserRequest = createAction('auth/gerCurrentUserRequest');\nconst getCurrentUserSuccess = createAction('auth/gerCurrentUserSuccess');\nconst getCurrentUserError = createAction('auth/gerCurrentUserError');\nexport default {\n    registerRequest,\n    registerSuccess,\n    registerError,\n    loginRequest,\n    loginSuccess,\n    loginError,\n    logoutRequest,\n    logoutSuccess,\n    logoutError,\n    getCurrentUserRequest,\n    getCurrentUserSuccess,\n    getCurrentUserError,\n};","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport authAction from './auth-action';\n\nconst initialUserState = { name: null, email: null };\nconst {\n    registerRequest,\n    registerSuccess,\n    registerError,\n    loginRequest,\n    loginSuccess,\n    loginError,\n    logoutRequest,\n    logoutSuccess,\n    logoutError,\n    getCurrentUserRequest,\n    getCurrentUserSuccess,\n    getCurrentUserError } = authAction;\n\nconst user = createReducer(initialUserState, {\n    [registerSuccess]: (_, { payload }) => payload.user,\n    [loginSuccess]: (_, { payload }) => payload.user,\n    [logoutSuccess]: () => initialUserState,\n    [getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n    [registerSuccess]: (_, { payload }) => payload.token,\n    [loginSuccess]: (_, { payload }) => payload.token,\n    [logoutSuccess]: () => null,\n});\n\nconst error = createReducer(null, {\n    [registerError]: (_, { payload }) => payload,\n    [loginError]: (_, { payload }) => payload,\n    [logoutError]: (_, { payload }) => payload,\n    [getCurrentUserError]: (_, { payload }) => payload,\n});\n\nconst isAuthenticated = createReducer(false, {\n    [registerSuccess]: () => true,\n    [loginSuccess]: () => true,\n    [getCurrentUserSuccess]: () => true,\n    [registerError]: () => false,\n    [loginError]: () => false,\n    [getCurrentUserError]: () => false,\n    [logoutSuccess]: () => false,\n});\n\n\nexport default combineReducers({\n    user,\n    isAuthenticated,\n    token,\n    error,\n});\n","import { success, error } from '@pnotify/core';\nimport '@pnotify/core/dist/PNotify.css';\nimport '@pnotify/core/dist/BrightTheme.css';\nconst goodRequest = () =>\n    success({\n        title: 'Success!',\n        delay: 1000\n    });\nconst notFound = () =>\n    error({\n        title: 'Bad Request',\n        delay: 1000\n    });\nexport default {\n    goodRequest,\n    error: notFound\n}","import axios from 'axios';\nimport authAction from './auth-action';\n\nimport Pnotify from '../../Components/Pnotify/Pnotify';\n\nconst {\n    registerRequest,\n    registerSuccess,\n    registerError,\n    loginRequest,\n    loginSuccess,\n    loginError,\n    logoutRequest,\n    logoutSuccess,\n    logoutError,\n    getCurrentUserRequest,\n    getCurrentUserSuccess,\n    getCurrentUserError,\n} = authAction;\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n    set(token) {\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    },\n    unset() {\n        axios.defaults.headers.common.Authorization = '';\n    },\n};\n\nconst register = credentials => async dispatch => {\n    dispatch(registerRequest());\n    try {\n        const respons = await axios.post('/users/signup', credentials);\n        token.set(respons.data.token);\n        Pnotify.goodRequest();\n        dispatch(registerSuccess(respons.data));\n    } catch (error) {\n        Pnotify.error();\n        dispatch(registerError(error.message));\n    }\n};\n\nconst logIn = credentials => async dispatch => {\n    dispatch(loginRequest());\n    try {\n        const respons = await axios.post('/users/login', credentials);\n        token.set(respons.data.token);\n        dispatch(loginSuccess(respons.data));\n        Pnotify.goodRequest();\n    } catch (error) {\n        Pnotify.error();\n        dispatch(loginError(error.message));\n    }\n};\n\nconst logOut = () => async dispatch => {\n    dispatch(logoutRequest());\n    try {\n        await axios.post('/users/logout');\n        token.unset();\n        dispatch(logoutSuccess());\n    } catch (error) {\n        Pnotify.error();\n        dispatch(logoutError(error.message));\n    }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n    const {\n        auth: { token: persistedToken },\n    } = getState();\n\n    if (!persistedToken) {\n        return;\n    }\n\n    token.set(persistedToken);\n    dispatch(getCurrentUserRequest());\n\n    try {\n        const response = await axios.get('/users/current');\n        dispatch(getCurrentUserSuccess(response.data));\n    } catch (error) {\n        Pnotify.error();\n        dispatch(getCurrentUserError(error.message));\n    }\n};\n\nexport default { register, logIn, logOut, getCurrentUser };\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\n\nconst getUserName = state => state.auth.user.name;\n\n\nexport default { getIsAuthenticated, getUserName };"],"sourceRoot":""}